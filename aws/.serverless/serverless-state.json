{
  "service": {
    "service": "xoso",
    "serviceObject": {
      "name": "xoso"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "ap-southeast-1",
      "stage": "dev",
      "iam": {
        "role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
      },
      "environment": {
        "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
        "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
        "REGION": "ap-southeast-1",
        "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
        "SERVICE_NAME": "xoso",
        "STAGE": "dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-southeast-1:*:table/xoso-tickets-dev*",
            "arn:aws:dynamodb:ap-southeast-1:*:table/xoso-results-dev*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:ap-southeast-1:*:function:xoso-dev-*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "StoreTicketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-storeTicket"
            }
          },
          "CheckTicketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-checkTicket"
            }
          },
          "GetUserTicketsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-getUserTickets"
            }
          },
          "ProcessWinnersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-processWinners"
            }
          },
          "FetchResultsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-fetchResults"
            }
          },
          "DuplicateTicketLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-duplicateTicket"
            }
          },
          "FetchDailyResultsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-fetchDailyResults"
            }
          },
          "FetchLotteryApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/xoso-dev-fetchLotteryApi"
            }
          },
          "StoreTicketLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/store_ticket.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-storeTicket",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Store lottery ticket for future processing",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "StoreTicketLogGroup"
            ]
          },
          "CheckTicketLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/check_ticket.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-checkTicket",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Check if a ticket is a winner",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "CheckTicketLogGroup"
            ]
          },
          "GetUserTicketsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/get_user_tickets.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-getUserTickets",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Get user's ticket history",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "GetUserTicketsLogGroup"
            ]
          },
          "ProcessWinnersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/process_winners.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-processWinners",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Process winners after lottery drawing",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "ProcessWinnersLogGroup"
            ]
          },
          "FetchResultsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/fetch_results.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-fetchResults",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Fetch lottery results from DynamoDB",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "FetchResultsLogGroup"
            ]
          },
          "DuplicateTicketLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/duplicate_ticket.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-duplicateTicket",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Duplicate an existing ticket",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "DuplicateTicketLogGroup"
            ]
          },
          "FetchDailyResultsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/fetch_daily_results.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-fetchDailyResults",
              "MemorySize": 1024,
              "Timeout": 60,
              "Description": "On-demand lottery results fetching triggered by scans",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "FetchDailyResultsLogGroup"
            ]
          },
          "FetchLotteryApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z/xoso.zip"
              },
              "Handler": "functions/fetch_lottery_api.handler",
              "Runtime": "python3.11",
              "FunctionName": "xoso-dev-fetchLotteryApi",
              "MemorySize": 1024,
              "Timeout": 30,
              "Description": "Centralized external lottery API calls (xoso188.net)",
              "Environment": {
                "Variables": {
                  "DYNAMODB_TICKETS_TABLE": "xoso-tickets-dev",
                  "DYNAMODB_RESULTS_TABLE": "xoso-results-dev",
                  "REGION": "ap-southeast-1",
                  "COGNITO_IDENTITY_POOL_ID": "ap-southeast-1:9728af83-62a8-410f-a585-53de188a5079",
                  "SERVICE_NAME": "xoso",
                  "STAGE": "dev"
                }
              },
              "Role": "arn:aws:iam::911167902662:role/xoso-dev-lambda-execution-role"
            },
            "DependsOn": [
              "FetchLotteryApiLogGroup"
            ]
          },
          "StoreTicketLambdaVersionwDYLBabHzt624krh73Mbh3KXsvRqwEb8BAeAxwVns": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StoreTicketLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Store lottery ticket for future processing"
            }
          },
          "CheckTicketLambdaVersion8vfL2w6hLZqtUaFssyQDg1zfUS2leq30phelLYZNUmY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckTicketLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Check if a ticket is a winner"
            }
          },
          "GetUserTicketsLambdaVersionbXfbVoja7VO3iTWDjZY9YXd6Hf4Tz8waN5XKeBg0v4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserTicketsLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Get user's ticket history"
            }
          },
          "ProcessWinnersLambdaVersionNPg9Xn2V2THc3NF4QIlF8u3URsIRCAuwzvT5o1HJ50": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessWinnersLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Process winners after lottery drawing"
            }
          },
          "FetchResultsLambdaVersion7yVmvKS2EYXWerCf05f77F1RuqwKQyMTBh4atM9F1A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchResultsLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Fetch lottery results from DynamoDB"
            }
          },
          "DuplicateTicketLambdaVersion5Z7YIoBHzxkkgDYdAXe1xhE4zYehPPuZPj4zEc88Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DuplicateTicketLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Duplicate an existing ticket"
            }
          },
          "FetchDailyResultsLambdaVersion38ZZH83tzzm5G3cOED2yo37uMV17e8pkeY12h6eiE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchDailyResultsLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "On-demand lottery results fetching triggered by scans"
            }
          },
          "FetchLotteryApiLambdaVersionAQGdo62W9CQCDcKSAbAW5ANU86W2tUtzsr5gAQP7NU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchLotteryApiLambdaFunction"
              },
              "CodeSha256": "zEdhlyZq84l7ujnEfrWAZbNm1aGj5KPhguEuJDCwn3s=",
              "Description": "Centralized external lottery API calls (xoso188.net)"
            }
          },
          "ProcessWinnersEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(15 9 * * ? *)",
              "State": "ENABLED",
              "Description": "Daily winner processing",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ProcessWinnersLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "processWinnersSchedule"
                }
              ]
            }
          },
          "ProcessWinnersLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessWinnersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ProcessWinnersEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-xoso",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceStoreticket": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "storeTicket",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCheckticket": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "checkTicket",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetusertickets": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getUserTickets",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetuserticketsUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetusertickets"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProcesswinners": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "processWinners",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFetchresults": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fetchResults",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDuplicateticket": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "duplicateTicket",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFetchdailyresults": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fetchDailyResults",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodStoreticketOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceStoreticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCheckticketOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetuserticketsUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetuserticketsUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProcesswinnersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProcesswinners"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFetchresultsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFetchresults"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDuplicateticketOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDuplicateticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFetchdailyresultsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFetchdailyresults"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodStoreticketPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStoreticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StoreTicketLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "StoreTicketLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCheckticketPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckTicketLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckTicketLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetuserticketsUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetuserticketsUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserTicketsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserTicketsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProcesswinnersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProcesswinners"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProcessWinnersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ProcessWinnersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFetchresultsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFetchresults"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FetchResultsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FetchResultsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDuplicateticketPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDuplicateticket"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DuplicateTicketLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DuplicateTicketLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFetchdailyresultsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFetchdailyresults"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FetchDailyResultsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FetchDailyResultsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1755908351679": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodStoreticketOptions",
              "ApiGatewayMethodCheckticketOptions",
              "ApiGatewayMethodGetuserticketsUseridVarOptions",
              "ApiGatewayMethodProcesswinnersOptions",
              "ApiGatewayMethodFetchresultsOptions",
              "ApiGatewayMethodDuplicateticketOptions",
              "ApiGatewayMethodFetchdailyresultsOptions",
              "ApiGatewayMethodStoreticketPost",
              "ApiGatewayMethodCheckticketPost",
              "ApiGatewayMethodGetuserticketsUseridVarGet",
              "ApiGatewayMethodProcesswinnersPost",
              "ApiGatewayMethodFetchresultsPost",
              "ApiGatewayMethodDuplicateticketPost",
              "ApiGatewayMethodFetchdailyresultsPost"
            ]
          },
          "StoreTicketLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StoreTicketLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckTicketLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckTicketLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserTicketsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserTicketsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProcessWinnersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessWinnersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FetchResultsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FetchResultsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DuplicateTicketLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DuplicateTicketLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FetchDailyResultsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FetchDailyResultsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TicketsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "xoso-tickets-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "ticketId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "drawDate",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "province",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ticketId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UserIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "DrawDateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "drawDate",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "province",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ResultsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "xoso-results-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "province",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "region",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "province",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "RegionDateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "region",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "date",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "DateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "date",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-xoso-dev-ServerlessDeploymentBucketName"
            }
          },
          "StoreTicketLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StoreTicketLambdaVersionwDYLBabHzt624krh73Mbh3KXsvRqwEb8BAeAxwVns"
            },
            "Export": {
              "Name": "sls-xoso-dev-StoreTicketLambdaFunctionQualifiedArn"
            }
          },
          "CheckTicketLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckTicketLambdaVersion8vfL2w6hLZqtUaFssyQDg1zfUS2leq30phelLYZNUmY"
            },
            "Export": {
              "Name": "sls-xoso-dev-CheckTicketLambdaFunctionQualifiedArn"
            }
          },
          "GetUserTicketsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserTicketsLambdaVersionbXfbVoja7VO3iTWDjZY9YXd6Hf4Tz8waN5XKeBg0v4"
            },
            "Export": {
              "Name": "sls-xoso-dev-GetUserTicketsLambdaFunctionQualifiedArn"
            }
          },
          "ProcessWinnersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessWinnersLambdaVersionNPg9Xn2V2THc3NF4QIlF8u3URsIRCAuwzvT5o1HJ50"
            },
            "Export": {
              "Name": "sls-xoso-dev-ProcessWinnersLambdaFunctionQualifiedArn"
            }
          },
          "FetchResultsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchResultsLambdaVersion7yVmvKS2EYXWerCf05f77F1RuqwKQyMTBh4atM9F1A"
            },
            "Export": {
              "Name": "sls-xoso-dev-FetchResultsLambdaFunctionQualifiedArn"
            }
          },
          "DuplicateTicketLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DuplicateTicketLambdaVersion5Z7YIoBHzxkkgDYdAXe1xhE4zYehPPuZPj4zEc88Y"
            },
            "Export": {
              "Name": "sls-xoso-dev-DuplicateTicketLambdaFunctionQualifiedArn"
            }
          },
          "FetchDailyResultsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchDailyResultsLambdaVersion38ZZH83tzzm5G3cOED2yo37uMV17e8pkeY12h6eiE"
            },
            "Export": {
              "Name": "sls-xoso-dev-FetchDailyResultsLambdaFunctionQualifiedArn"
            }
          },
          "FetchLotteryApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchLotteryApiLambdaVersionAQGdo62W9CQCDcKSAbAW5ANU86W2tUtzsr5gAQP7NU"
            },
            "Export": {
              "Name": "sls-xoso-dev-FetchLotteryApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-xoso-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": false
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "pluginsData": {},
    "functions": {
      "storeTicket": {
        "handler": "functions/store_ticket.handler",
        "description": "Store lottery ticket for future processing",
        "events": [
          {
            "http": {
              "path": "storeTicket",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-storeTicket",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "StoreTicketLambdaVersionwDYLBabHzt624krh73Mbh3KXsvRqwEb8BAeAxwVns"
      },
      "checkTicket": {
        "handler": "functions/check_ticket.handler",
        "description": "Check if a ticket is a winner",
        "events": [
          {
            "http": {
              "path": "checkTicket",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-checkTicket",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "CheckTicketLambdaVersion8vfL2w6hLZqtUaFssyQDg1zfUS2leq30phelLYZNUmY"
      },
      "getUserTickets": {
        "handler": "functions/get_user_tickets.handler",
        "description": "Get user's ticket history",
        "events": [
          {
            "http": {
              "path": "getUserTickets/{userId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-getUserTickets",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "GetUserTicketsLambdaVersionbXfbVoja7VO3iTWDjZY9YXd6Hf4Tz8waN5XKeBg0v4"
      },
      "processWinners": {
        "handler": "functions/process_winners.handler",
        "description": "Process winners after lottery drawing",
        "events": [
          {
            "http": {
              "path": "processWinners",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "schedule": {
              "rate": [
                "cron(15 9 * * ? *)"
              ],
              "description": "Daily winner processing"
            }
          }
        ],
        "name": "xoso-dev-processWinners",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "ProcessWinnersLambdaVersionNPg9Xn2V2THc3NF4QIlF8u3URsIRCAuwzvT5o1HJ50"
      },
      "fetchResults": {
        "handler": "functions/fetch_results.handler",
        "description": "Fetch lottery results from DynamoDB",
        "events": [
          {
            "http": {
              "path": "fetchResults",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-fetchResults",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "FetchResultsLambdaVersion7yVmvKS2EYXWerCf05f77F1RuqwKQyMTBh4atM9F1A"
      },
      "duplicateTicket": {
        "handler": "functions/duplicate_ticket.handler",
        "description": "Duplicate an existing ticket",
        "events": [
          {
            "http": {
              "path": "duplicateTicket",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-duplicateTicket",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "DuplicateTicketLambdaVersion5Z7YIoBHzxkkgDYdAXe1xhE4zYehPPuZPj4zEc88Y"
      },
      "fetchDailyResults": {
        "handler": "functions/fetch_daily_results.handler",
        "description": "On-demand lottery results fetching triggered by scans",
        "timeout": 60,
        "events": [
          {
            "http": {
              "path": "fetchDailyResults",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "xoso-dev-fetchDailyResults",
        "package": {},
        "memory": 1024,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "FetchDailyResultsLambdaVersion38ZZH83tzzm5G3cOED2yo37uMV17e8pkeY12h6eiE"
      },
      "fetchLotteryApi": {
        "handler": "functions/fetch_lottery_api.handler",
        "description": "Centralized external lottery API calls (xoso188.net)",
        "timeout": 30,
        "events": [],
        "name": "xoso-dev-fetchLotteryApi",
        "package": {},
        "memory": 1024,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "FetchLotteryApiLambdaVersionAQGdo62W9CQCDcKSAbAW5ANU86W2tUtzsr5gAQP7NU"
      }
    },
    "resources": {
      "Resources": {
        "TicketsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "xoso-tickets-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "ticketId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "drawDate",
                "AttributeType": "S"
              },
              {
                "AttributeName": "province",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "ticketId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UserIndex",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "DrawDateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "drawDate",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "province",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ResultsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "xoso-results-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "province",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              },
              {
                "AttributeName": "region",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "province",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "date",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "RegionDateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "region",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "date",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "DateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "date",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless-development.yml",
    "initialServerlessConfig": {
      "service": "xoso",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/cdawson/Desktop/Xo So/aws/.serverless/xoso.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/xoso/dev/1755908356539-2025-08-23T00:19:16.539Z",
    "artifact": "xoso.zip"
  }
}